This is an implementation of Common Lisp's 'loop' macro for Scheme.
It originates in SICL (https://github.com/robert-strandh/SICL).

It's not portable, depending on a number of features specific to s7; however,
if you can do (single) dynamic dispatch it shouldn't be difficult to port.
Note also that I have largely tried to keep the code close to the original
where possible, rather than trying to make it idiomatic, so that it will be
easier to port future upstream improvements.

There is an existing implementation of the macro that has been ported fairly
widely; this, unlike that, is permissively licensed and supports a number of
additional features:

- Destructuring  (loop for (x y) in '((1 2) (3 4) (5 6)))
- Keywords  (loop :for i :below 5)
- Use of multiple values  (loop for i below 5 collect (if (< i 3) i (values i i))) #| --> (0 1 2 3 3 4 4) |#
- Use arbitrary iterators with 'across'  (loop for (k . v) across (hash-table 'a 5 'b 6) collect k)
  (For this reason, hash-keys/hash-values are elided.)

Additional notes:

- Error messages are not nice (yet)
- Uninitialized values will be initialized to #<undefined> rather than nil
  (loop with x return x) #| --> #<undefined> |#
- Type specifiers are parsed, but largely ignored.  The exception is the above:
  (loop with x fixnum return x) #| --> 0 |#
  I'm not sure what more there is to do with those; suggestions welcome!
- When destructuring, the catch-all no-bind is () rather than NIL.  E.G. (loop
  with (x () y) = '(1 2 3 4) return whatever)  ←→  (let ((x 1) (y 3)) whatever)
  In this case, () is the empty (de)structure which matches everything and
  places no constraints.

Todo:

- Collect a vector/string instead of a list
- Collect into a lazy iterator?
